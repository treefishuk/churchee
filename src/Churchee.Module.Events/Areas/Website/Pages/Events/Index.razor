@using Churchee.Module.Events.Features.Commands
@using Churchee.Module.Events.Features.Queries
@using Churchee.Module.Site.Features.CDN.Queries
@using Churchee.Module.UI.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Sections
@using MediatR
@using Radzen.Blazor
@using Radzen
@page "/management/events"

<PageName></PageName>

<SectionContent SectionName="top-bar">
    <div class="rz-breadcrumb-item">
        <a class="rz-button rz-button-sm rz-success" href="/management/events/create">Create</a>
    </div>
</SectionContent>


<Grid @ref="dataGrid" TItem="GetListingQueryResponseItem" IsLoading=isLoading Data=listingData LoadData="@LoadData" ShowEdit="true" ImagePrefix="@(imagePrefix)" OnDelete="OnDelete"></Grid>

@code {

    string imagePrefix = "";

    Grid<GetListingQueryResponseItem> dataGrid;

    [Inject]
    private NotificationService _notificationService { get; set; } = default!;

    [Inject]
    private IMediator _mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        imagePrefix = await _mediator.Send(new GetCDNPathQuery());
    }

    int count;

    IEnumerable<GetListingQueryResponseItem> listingData;

    bool isLoading = false;

    async Task OnDelete(GetListingQueryResponseItem item)
    {
        var result = await _mediator.Send(new DeleteEventCommand(item.Id));

        if (!result.IsSuccess)
        {
            _notificationService.Notify(NotificationSeverity.Error, "Error: Could not remove Event");

            return;
        }

        _notificationService.Notify(NotificationSeverity.Success, "Event Deleted");
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        string orderBy = "CreatedDate";
        string orderByDirection = "desc";

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            var split = args.OrderBy.Split(" ");
            orderBy = split[0];
            orderByDirection = split[1];

        }

    var result = await _mediator.Send(new GetListingQuery(
                skip: args?.Skip ?? 0,
                take: args?.Top ?? 20,
                searchText: args?.Filter ?? string.Empty,
                orderBy: string.IsNullOrEmpty(args?.OrderBy) ? "CreatedDate desc" : args?.OrderBy), default);

    // Important!!! Make sure the Count property of RadzenDataGrid is set.
    count = result.RecordsTotal;

    // Perform paging via Skip and Take.
    listingData = result.Data;

    isLoading = false;
    }

}
