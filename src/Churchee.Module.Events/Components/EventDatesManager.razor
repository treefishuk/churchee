@using Churchee.Module.Events.Models
@using Churchee.Module.UI.Models
@using Microsoft.AspNetCore.Components.Routing
@using Radzen
@using Radzen.Blazor

@foreach(var item in Dates.OrderBy(o => o.Start))
{
    <RadzenStack Orientation="Orientation.Horizontal">

        <div>
            @if(item.Start != null)
            {
                <div>@item.Start.Value.ToString("dd/MM/yyyy HH:mm")</div>
            }
        </div>
        <div>

            @if (item.End != null)
            {
                <div>@item.End.Value.ToString("dd/MM/yyyy HH:mm")</div>
            }
        </div>

        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="() => RemoveEntry(item)"></RadzenButton>


    </RadzenStack>
}


    <RadzenStack Orientation="Orientation.Horizontal">

    <RadzenDatePicker Max=End DateFormat="dd-MM-yyyy HH:mm" ShowTime=true @bind-Value=Start />
    <RadzenDatePicker Min=Start DateFormat="dd-MM-yyyy HH:mm" ShowTime=true @bind-Value=End />

    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add" Click="AddEntry"></RadzenButton>

</RadzenStack>



@code {

    [Parameter] 
    public List<EventDateModel> Dates { get; set; }

    public DateTime? Start { get; set; }
    public DateTime? End { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public void AddEntry()
    {
        if(Start != null)
        {
            Dates.Add(new EventDateModel(Start, End));

            Start = null;
            End = null;

            StateHasChanged();
        }
    }

    public void RemoveEntry(EventDateModel item)
    {
        Dates.Remove(item);

        StateHasChanged();
    }

}
