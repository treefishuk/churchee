@page "/management/pages"
@using Churchee.Module.Site.Features.Pages.Commands
@using Churchee.Module.Site.Features.Pages.Queries
@using Churchee.Module.UI.Components
@using Churchee.Module.UI.Models
@using MediatR
@using Microsoft.AspNetCore.Components.Sections
@using System.Text.Json
@using Microsoft.AspNetCore.Http
@using Radzen
@using Radzen.Blazor
@using System.Net.Http.Json
@inject IMediator Mediator
@inject NotificationService _notificationService
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor _httpContextAccessor


<PageName Name="Pages"></PageName>

<SectionContent SectionName="top-bar">
    <div class="rz-breadcrumb-item">
        <a class="rz-button rz-button-sm rz-success" href="/management/pages/create">Create</a>
    </div> 
</SectionContent>

<RadzenDataGrid @ref="grid" AllowFiltering="true" AllowSorting="true" AllowColumnResize="true"
                Data="@employees" TItem="GetListingQueryResponseItem" LoadChildData="@LoadChildData" RowRender="@RowRender"
                RowCollapse="@(args => grid.ColumnsCollection.ToList().ForEach(c => c.ClearFilters()))">
    <Columns>

        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Title="" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <a class="rz-button rz-button-md rz-variant-filled rz-primary rz-shade-default rz-button-icon-only" href="/management/pages/edit/@(data.Id)">
                    <span class="rz-button-box">
                        <i class="rz-button-icon-left rzi">edit</i>
                    </span>
                </a>
            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Property="Title" Title="Title" />
        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Property="Url" Title="Url" />
        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Property="Created" Title="Created" FormatString="{0:d}" Width="160px" />

        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Title="Published" Sortable="true" Filterable="true" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="data">
                @{
                    if (data.Published)
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="@true" Text="True" />
                    }
                    else
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Warning" IsPill="@true" Text="False" />
                    }
                }
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="GetListingQueryResponseItem" Title="" Sortable="false" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
            <Template Context="data">

                @{
                    if (data.Url != "/")
                    {
                        <RadzenButton Click=@(args => OnDelete(data.Id)) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                    }

                }

            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {

    IEnumerable<GetListingQueryResponseItem> employees;

    RadzenDataGrid<GetListingQueryResponseItem> grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await Mediator.Send(new GetListingQuery(null, string.Empty), default);

        employees = result;
    }


    private async Task OnDelete(Guid id)
    {
        var result = await Mediator.Send(new DeletePageCommand(id), default);

        if (result.IsSuccess)
        {
            _notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Page Deleted" });

            await LoadData();

        }
    }

    void RowRender(RowRenderEventArgs<GetListingQueryResponseItem> args)
    {
        args.Expandable = args.Data.HasChildren == true;
    }

    async Task LoadChildData(DataGridLoadChildDataEventArgs<GetListingQueryResponseItem> args)
    {
        args.Data = await Mediator.Send(new GetListingQuery(args.Item.Id, string.Empty), default);
    }

}




