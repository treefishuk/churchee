@using Churchee.Module.Podcasts.Features.Commands
@using Churchee.Module.UI.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Sections
@using MediatR
@using Churchee.Module.Podcasts.SpotifyIntegration.Areas.Integrations.Models
@using Churchee.Module.Podcasts.Spotify.Features.Podcasts.Commands
@using Churchee.Module.Podcasts.Spotify.Features.Podcasts.Queries
@using Churchee.Module.UI.Components
@using Radzen.Blazor
@using Radzen
@page "/management/integrations/spotify"
@inject ILogger<Spotify> Logger
@inject IMediator Mediator


@if (spotifyConfigued)
{
    <div>

        @if (lastRun != null)
        {
            <b>Last Run: @lastRun.Value.ToShortDateString()</b>
        }

        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center">
            <h1>Spotify podcasts is set up!</h1>

            <RadzenButton Click=@(args => DisableSync()) Text="Disable Sync" ButtonStyle="ButtonStyle.Danger" Icon="sync_disabled" />
            <RadzenButton Click=@(args => SyncNow()) Text="Sync Now" ButtonStyle="ButtonStyle.Primary" Icon="sync" />

        </RadzenStack>

    </div>

}

else
{
    <RadzenRow Gap="1rem">
        <RadzenColumn class="rz-p-5">
            <Form InputModel="@InputModel" OnSave=@(async () => await ValidSubmitForm())>
            </Form>
        </RadzenColumn>
        <RadzenColumn class="rz-p-5">
            
            <h3>Configuration Instructions</h3>

            <p>Log in to <a href="https://podcasters.spotify.com/pod/login" target="_blank">https://podcasters.spotify.com/pod/login</a></p>

            <div class="text-center">
                <img class="rz-p-10 rounded" src="/_content/Churchee.Module.Podcasts.Spotify/img/spotify-login.png" />
            </div>

            <p>Once the home screen has loaded, click the "Profile Page" button, located next to the "Share" button</p>

            <div class="text-center">
                <img class="rz-p-10 rounded" src="/_content/Churchee.Module.Podcasts.Spotify/img/spotify-home.png" />
            </div>

            <p>Finally, click the RSS feed button to copy the RSS feed URL:
                <RadzenIcon Icon="rss_feed" IconColor="#fff" Style="background: #fe8a4c"></RadzenIcon>
            </p>

        </RadzenColumn>
    </RadzenRow>
}


@code{

    [Inject]
    private NotificationService _notificationService { get; set; }

    bool spotifyConfigued = false;

    DateTime? lastRun = null;

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(new GetPodcastSettingsRequest());

        InputModel = new InputModel(result.SpotifyUrl, result.NameForContent);

        lastRun = result.LastRun;

        spotifyConfigued = !string.IsNullOrEmpty(result.SpotifyUrl);
    }

    private async Task DisableSync()
    {
        var result = await Mediator.Send(new DisableSpotifyPodcastSyncCommand());

        if (result.IsSuccess)
        {
            spotifyConfigued = false;

            _notificationService.Notify(NotificationSeverity.Success, "Integration Disabled");

            InputModel = new InputModel();

            StateHasChanged();
        }
    }

    private async Task SyncNow()
    {
        var result = await Mediator.Send(new EnableSpotifyPodcastSyncCommand(InputModel?.SpotifyRSSFeedUrl));

        if (result.IsSuccess)
        {
            _notificationService.Notify(NotificationSeverity.Success, "Sync Scheduled");
        }
    }

    [SupplyParameterFromForm]
    public InputModel InputModel { get; set; } = new();

    private async Task ValidSubmitForm()
    {
        var result = await Mediator.Send(new PodcastsEnabledCommand(InputModel.NameForContent));

        if (!result.IsSuccess)
        {
            _notificationService.Notify(NotificationSeverity.Error, "Failed to enable Podcasts");
        }

        var result2 = await Mediator.Send(new EnableSpotifyPodcastSyncCommand(InputModel?.SpotifyRSSFeedUrl));

        if (result.IsSuccess)
        {
            Logger.LogDebug("spotifyrssfeedurl = {spotifyrssfeedurl}", InputModel.SpotifyRSSFeedUrl);

            _notificationService.Notify(NotificationSeverity.Success, "Spotify Podcasts configured, Syncing will being shortly");

            spotifyConfigued = true;

            StateHasChanged();

        }
    }

}