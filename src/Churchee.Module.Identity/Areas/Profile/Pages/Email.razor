@using Churchee.Common.Abstractions.Utilities
@using Churchee.Module.UI.Components
@using Microsoft.AspNetCore.Http

@page "/management/profile/email"

<PageName Name="Email"></PageName>

<h3>ManageEmail</h3>

﻿@if (_user == null)
{
    <div>Loading...</div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="_user.Email" class="form-control" id="floatingCurrentEmail" placeholder="CurrentEmail" disabled />
                            <label for="floatingCurrentEmail">CurrentEmail</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="_model.NewEmail" class="form-control" id="floatingNewEmail" placeholder="NewEmail" />
                            <label for="floatingNewEmail">NewEmail</label>
                            <ValidationMessage For="@(() => _model.NewEmail)" />
                        </div>
                        <div class="d-grid mb-2">
                            <button disabled="@_isLoading" class="btn btn-lg btn-primary btn-login fw-bold text-uppercase">
                                Save
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Inject]
    private ChurcheeUserManager _userManager { get; set; }

    [Inject]
    private IHttpContextAccessor _context { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    private NotificationService _notificationService { get; set; }

    [Inject]
    private IEmailService _emailService { get; set; }

    private ApplicationUser _user;

    private ChangeEmailModel _model = new ChangeEmailModel();

    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var id = _context.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var user = await _userManager.FindByIdAsync(id);
        _user = user;
    }

    private async void OnValidSubmit()
    {
        _isLoading = true;

        try
        {
            var isEmailRegistered = await _userManager.FindByEmailAsync(_model.NewEmail);

            if (isEmailRegistered != null)
            {
                _notificationService.Notify(NotificationSeverity.Error, "This Email cannot be used");

            }
            else if (_model.NewEmail != _user.Email)
            {
                await SendEmailChangeConfirmationAsync(_user, _model.NewEmail);

                _notificationService.Notify(NotificationSeverity.Info, "Check Your Inbox To Confirm Email Change");
            }
        }
        catch (Exception)
        {
            _notificationService.Notify(NotificationSeverity.Error, "Sorry, something appears to have gone wrong, please contact support");
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task SendEmailChangeConfirmationAsync(ApplicationUser user, string newEmail)
    {
        var baseUri = _navigationManager.BaseUri;
        var code = await _userManager.GenerateChangeEmailTokenAsync(user, newEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = $"{baseUri}Management/Profile/ConfirmEmailChange?user={user.Id}&email={newEmail}&code={code}";
        await _emailService.SendEmailAsync(user.Email, "Confirm Email", $"Please confirm your email <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>Click Here To Confirm</a>.");
    }
}
