@page "/management/profile/password"
@using Churchee.Common.Abstractions.Utilities
@using System.Security.Claims

<PageName Name="Password"></PageName>

﻿@if (_user == null)
{
    <div>Loading...</div>
}
else
{
        <RadzenRow Gap="2rem" RowGap="2rem" class="rz-m-0 rz-m-md-12">

            <RadzenColumn Size="12" SizeMD="4">
               <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
                                <DataAnnotationsValidator />

                                <RadzenStack>

                                    <RadzenFormField Text="Old Password">
                                        <ChildContent>
                                            <RadzenPassword @bind-Value="_model.OldPassword" id="floatingOldPassword" />
                                        </ChildContent>
                                        <Helper>
                                            <ValidationMessage For="@(() => _model.OldPassword)" />
                                        </Helper>
                                    </RadzenFormField>

                                    <RadzenFormField Text="New Password">
                                        <ChildContent>
                                            <RadzenPassword @bind-Value="_model.NewPassword" id="floatingNewPassword" />
                                        </ChildContent>
                                        <Helper>
                                            <ValidationMessage For="@(() => _model.NewPassword)" />
                                        </Helper>
                                    </RadzenFormField>

                                    <RadzenFormField Text="Confirm Password">
                                        <ChildContent>
                                            <RadzenPassword @bind-Value="_model.ConfirmPassword" id="floatingConfirmPassword" />
                                        </ChildContent>
                                        <Helper>
                                            <ValidationMessage For="@(() => _model.ConfirmPassword)" />
                                        </Helper>
                                    </RadzenFormField>

                                    <RadzenButton Text="Submit" ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit" Disabled="@_isLoading" />

                                </RadzenStack>

                            </EditForm>
            </RadzenColumn>

        </RadzenRow>

}


@code {

    [Inject]
    private ChurcheeUserManager _userManager { get; set; }

    [Inject]
    private IHttpContextAccessor _context { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Inject]
    private NotificationService _notificationService { get; set; }

    [Inject]
    private IEmailService _emailService { get; set; }

    private ApplicationUser _user;

    private ChangePasswordModel _model = new ChangePasswordModel();

    private bool _isLoading = false;

    public Password()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        var id = _context.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var user = await _userManager.FindByIdAsync(id);
        _user = user;
    }

    private async void OnValidSubmit()
    {
        _isLoading = true;

        try
        {

            var id = _context.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
            var user = await _userManager.FindByIdAsync(id);
            var result = await _userManager.ChangePasswordAsync(user, _model.OldPassword, _model.NewPassword);

            if (result.Succeeded)
            {
                _notificationService.Notify(NotificationSeverity.Success, "Password Updated");
            }

            else
            {
                _notificationService.Notify(NotificationSeverity.Error, "Failed to Update Password");
            }
        }
        catch (Exception)
        {
            _notificationService.Notify(NotificationSeverity.Error, "Sorry, something appears to have gone wrong, please contact support");
        }

        _isLoading = false;

        StateHasChanged();
    }

}
