@page "/management/configuration/contributors/edit/{Id:guid}"
@using Churchee.Common.Abstractions.Auth
@using Churchee.Common.ValueTypes
@using Churchee.Module.Identity.Features.Contributors.Queries
@using Churchee.Module.Identity.Features.Roles.Queries
@using Churchee.Module.UI.Components
@using MediatR
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.Mvc.Rendering
@using Radzen
@using Radzen.Blazor

<PageName Name="Edit Contributor"></PageName>

@if (InputModel != null)
{
    <Form InputModel="@InputModel" OnSave=@(async () => await ValidSubmitForm()) />
}

@code {
    [SupplyParameterFromForm]
    public EditContributorModel InputModel { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    [Inject]
    private IMediator Mediator { get; set; } = default!;

    [Inject]
    private ICurrentUser CurrentUser { get; set; } = default!;

    [Inject]
    private ChurcheeUserManager UserManager { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private NotificationService NotificationService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var roles = await Mediator.Send(new GetAllSelectableRolesForUserQuery(Id));

        InputModel = new(new MultiSelect(roles));
    }

    private async Task ValidSubmitForm()
    {
        var user = await UserManager.FindByIdAsync(Id.ToString());

        var rolesNames = InputModel.Roles.Items.Where(w => InputModel.Roles.SelectedValues.Contains(w.Value)).Select(s => s.Text).ToList();

        var exisitingRoles = await UserManager.GetRolesAsync(user);

        var rolesToRemove = exisitingRoles.Where(w => !rolesNames.Contains(w)).ToList();
        
        var rolesToAdd = rolesNames.Where(w => !exisitingRoles.Contains(w)).ToList();

        await UserManager.RemoveFromRolesAsync(user, rolesToRemove);

        await UserManager.AddToRolesAsync(user, rolesToAdd);

        NotificationService.Notify(NotificationSeverity.Success, "Contributor Updated");

        NavigationManager.NavigateTo("/management/configuration/contributors");
    }

}
