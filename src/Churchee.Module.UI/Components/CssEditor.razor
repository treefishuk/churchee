@using BlazorMonaco.Editor
@using Microsoft.AspNetCore.Components.Forms
@using System.Reflection
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging

<ChurcheeErrorBoundry>
    <ChildContent>
        @if (rendered)
        {
            <StandaloneCodeEditor @ref=_editorRef Id="@Id" ConstructionOptions="CSSEditorConstructionOptions" OnKeyUp="@(async () => await OnEditorChange())" OnDidInit="@(async () => await OnEditorDidInit())" />
        }
     </ChildContent>
    <ErrorContent>
        Failed to load Editor
    </ErrorContent>
</ChurcheeErrorBoundry>


@code {

    private bool rendered = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            rendered = true;
            StateHasChanged();

        }
    }

    private string Id { get; set; }

    [Parameter]
    public string Value { get; set; }

    private StandaloneCodeEditor _editorRef;


    [Inject]
    protected ILogger<CssEditor> Logger { get; set; } = default!;

    private StandaloneEditorConstructionOptions CSSEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "css"
            };
    }

    public async Task OnEditorChange()
    {
        try
        {
            var value = await _editorRef.GetValue();

            await Change.InvokeAsync(value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "OnEditorChange Error");

            throw;
        }
    }

    protected override Task OnInitializedAsync()
    {
        Id = Guid.NewGuid().ToString();

        return base.OnInitializedAsync();
    }

    public async Task OnEditorDidInit()
    {
        try
        {
            await _editorRef.SetValue(Value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "OnEditorChange Error");

            throw;
        }
    }

    [Parameter]
    public EventCallback<string> Change { get; set; }

}





